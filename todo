#!/bin/bash

function getTodoFile {
    local filename

    # see if FILE has already been set (eg, via command line arguments),
    # if not, try and grab it from ENV variable
    if [ -z "$FILE" ]; then
        filename=$TODO_FILE
    fi

    # if we still don't have FILE set, default to $HOME/todo.txt
    if [ -z "$FILE" ]; then
        filename=$HOME/todo.txt
    fi
    echo "$filename"
}

function listTodo {
    if [ "$2" ]; then
        sort $1 | grep -v '^x' | grep -E " \+$2( .*)*$"
    else
        # sort the file, and filter out completed items (ie, starting with x)
        sort $1 | grep -v '^x'
    fi
}

function addTodo {

    local priority
    local message
    local projects
    local contexts

    # priority
    while true; do
        read -p 'Priority (Optional) [A-Z]: ' priority

        # convert to upper case
        priority=${priority^^}

        # validate priority, break if it's ok
        if [[ $priority =~ ^[A-Z]?$ ]]; then
            if [ "$priority" ]; then
                local styledPriority="($priority) "
            fi
            break
        fi
    done

    # message
    while true; do
        read -p 'Message: ' message

        # validate there is some message
        if [[ $message =~ .*[^\s]+.* ]]; then
            break
        fi
    done

    # projects
    while true; do
        read -p 'Projects (Optional, space delimited): ' projects
        local styledProjects

        # validate projects, break if it's ok
        if [[ $projects =~ ^[a-zA-Z0-9\ ]*$ ]]; then

            # prepend "+" to each project
            for word in ${projects}; do
                styledProjects+=" +$word"
            done

            break
        fi
    done

    # contexts
    while true; do
        read -p 'Contexts (Optional, space delimited): ' contexts
        local styledContexts

        # validate contexts, break if it's ok
        if [[ $contexts =~ ^[a-zA-Z0-9\ ]*$ ]]; then

            # prepend "@" to each context
            for word in ${contexts}; do
                styledContexts+=" @$word"
            done

            break
        fi
    done

    local todoLine="$styledPriority$message$styledProjects$styledContexts"
    echo "$todoLine" >> "$1"
    echo "$todoLine"
}

# parse parameters
while [[ $# > 0 ]]; do
    key="$1"

    case $key in
        -f|--file)
            filename="$2"
            shift # past the file argument
        ;;
        -p|--project)
            project="$2"
            actionListProject="true"
            shift # past the project argument
        ;;
        -n|--new)
            actionAdd="true"
            # no argument to shift past
        ;;
        -l|--list)
            actionList="true"
            # no argument to shift past
        ;;
        -e|--edit)
            actionEdit="true"
            # no argument to shift past
        ;;
            -h|--help)
            # TODO print help
            exit
        ;;
        *)
            # unknown option
        ;;
    esac
    shift
done

# ensure we have a filename
if [ -z "$filename" ]; then
    filename=$(getTodoFile)
fi

if [ "$actionEdit" ]; then
    "${EDITOR:-vi}" $filename
    exit
fi

echo "todo file: $filename"

if [ "$actionListProject" ]; then
    listTodo $filename $project
elif [ "$actionList" ]; then
    listTodo $filename
elif [ "$actionAdd" ]; then
    addTodo $filename
fi
